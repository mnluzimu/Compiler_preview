var       varsym
m          ident
,          comma
n          ident
,          comma
r          ident
,          comma
q          ident
;       semicoln
procedure       proceduresym
gcd          ident
;       semicoln
begin       beginsym
while          ident
r          ident
#            neq
0        number
do       dosym
begin       beginsym
q          ident
:=         becomes
m          ident
/          slash
n          ident
;       semicoln
r          ident
:=         becomes
m          ident
-          minus
q          ident
*          times
n          ident
;       semicoln
m          ident
:=         becomes
n          ident
;       semicoln
n          ident
:=         becomes
r          ident
;       semicoln
end       endsym
;       semicoln
end       endsym
;       semicoln
begin       beginsym
read       readsym
(         lparen
m          ident
)         rparen
;       semicoln
read       readsym
(         lparen
n          ident
)         rparen
;       semicoln
if       ifsym
m          ident
<            lss
n          ident
then       thensym
begin       beginsym
r          ident
:=         becomes
m          ident
;       semicoln
m          ident
:=         becomes
n          ident
;       semicoln
n          ident
:=         becomes
r          ident
;       semicoln
end       endsym
;       semicoln
begin       beginsym
r          ident
:=         becomes
1        number
;       semicoln
call       callsym
gcd          ident
;       semicoln
write       writesym
(         lparen
m          ident
)         rparen
;       semicoln
end       endsym
;       semicoln
end       endsym
.         period
